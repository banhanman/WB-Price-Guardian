import asyncio
import logging
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
import time
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('wb_price_monitor.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    article INTEGER NOT NULL,
    name TEXT,
    current_price REAL,
    last_update DATETIME,
    UNIQUE(user_id, article)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS price_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER NOT NULL,
    price REAL,
    change_date DATETIME,
    FOREIGN KEY(product_id) REFERENCES products(id)
''')
conn.commit()

class ProductState(StatesGroup):
    waiting_for_article = State()

def get_wb_product_info(article):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
    url = f"https://card.wb.ru/cards/detail?nm={article}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
        'Accept': 'application/json'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if not data.get('data', {}).get('products'):
            return None, None, None
        
        product = data['data']['products'][0]
        name = product.get('name')
        price = product.get('salePriceU')
        
        # –¶–µ–Ω–∞ –≤ API –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏
        if price:
            price = price / 100
        
        return name, price, True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, False

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
    keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product"))
    keyboard.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products"))
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="set_interval"))
    
    await message.answer(
        "üîî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Price Guardian!\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è—é –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª—É WB:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'add_product')
async def process_add_product(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (WB –∫–æ–¥):"
    )
    await ProductState.waiting_for_article.set()

@dp.message_handler(state=ProductState.waiting_for_article)
async def process_article(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    article = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–∞
    if not article.isdigit():
        await message.answer("‚ùå –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    name, price, success = get_wb_product_info(article)
    
    if not success:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()
        return
    
    if price is None:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.")
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
    cursor.execute("SELECT id FROM products WHERE user_id = ? AND article = ?", (user_id, article))
    if cursor.fetchone():
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        await state.finish()
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
    current_time = datetime.now().isoformat()
    cursor.execute(
        "INSERT INTO products (user_id, article, name, current_price, last_update) VALUES (?, ?, ?, ?, ?)",
        (user_id, article, name, price, current_time)
    )
    product_id = cursor.lastrowid
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    cursor.execute(
        "INSERT INTO price_history (product_id, price, change_date) VALUES (?, ?, ?)",
        (product_id, price, current_time)
    )
    conn.commit()
    
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} —Ä—É–±."
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'list_products')
async def process_list_products(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("SELECT article, name, current_price FROM products WHERE user_id = ?", (user_id,))
    products = cursor.fetchall()
    
    if not products:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    response = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
    for idx, (article, name, price) in enumerate(products, 1):
        response += f"{idx}. {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
    
    await bot.send_message(user_id, response)

@dp.callback_query_handler(lambda c: c.data == 'remove_product')
async def process_remove_product(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("SELECT id, article, name FROM products WHERE user_id = ?", (user_id,))
    products = cursor.fetchall()
    
    if not products:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for product_id, article, name in products:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        btn_text = f"{name[:20]}..." if len(name) > 20 else name
        keyboard.add(InlineKeyboardButton(
            f"{btn_text} ({article})",
            callback_data=f"remove_{product_id}"
        ))
    
    await bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('remove_'))
async def confirm_remove(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[1]
    cursor.execute("SELECT name, article FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    if not product:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    name, article = product
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_remove_{product_id}"))
    keyboard.add(InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_remove"))
    
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n{name} (–∞—Ä—Ç. {article})?",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_remove_'))
async def remove_product(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[2]
    
    cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
    cursor.execute("DELETE FROM price_history WHERE product_id = ?", (product_id,))
    conn.commit()
    
    await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω.")
    await bot.send_message(callback_query.from_user.id, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data == 'cancel_remove')
async def cancel_remove(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await bot.send_message(callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data == 'set_interval')
async def set_check_interval(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=3)
    intervals = [
        ("15 –º–∏–Ω—É—Ç", 900),
        ("30 –º–∏–Ω—É—Ç", 1800),
        ("1 —á–∞—Å", 3600),
        ("2 —á–∞—Å–∞", 7200),
        ("4 —á–∞—Å–∞", 14400),
        ("6 —á–∞—Å–æ–≤", 21600)
    ]
    
    for text, seconds in intervals:
        keyboard.insert(InlineKeyboardButton(text, callback_data=f"interval_{seconds}"))
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('interval_'))
async def apply_interval(callback_query: types.CallbackQuery):
    global CHECK_INTERVAL
    seconds = int(callback_query.data.split('_')[1])
    CHECK_INTERVAL = seconds
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î
    user_id = callback_query.from_user.id
    cursor.execute("REPLACE INTO settings (user_id, check_interval) VALUES (?, ?)", (user_id, seconds))
    conn.commit()
    
    minutes = seconds // 60
    await bot.answer_callback_query(callback_query.id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
    await bot.send_message(user_id, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω—É—Ç")

async def price_check_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω"""
    while True:
        logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL} —Å–µ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        cursor.execute("SELECT id, user_id, article, name, current_price FROM products")
        products = cursor.fetchall()
        
        for product in products:
            product_id, user_id, article, name, old_price = product
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            _, new_price, success = get_wb_product_info(article)
            
            if not success:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}")
                continue
            
            if new_price is None:
                logger.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏")
                continue
            
            current_time = datetime.now().isoformat()
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if abs(new_price - old_price) > 0.01:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = (
                    f"‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>\n\n"
                    f"–¢–æ–≤–∞—Ä: {name}\n"
                    f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n\n"
                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <s>{old_price:.2f} —Ä—É–±.</s>\n"
                    f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{new_price:.2f} —Ä—É–±.</b>\n\n"
                    f"–†–∞–∑–Ω–∏—Ü–∞: {new_price - old_price:+.2f} —Ä—É–±."
                )
                
                try:
                    await bot.send_message(user_id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
                cursor.execute(
                    "UPDATE products SET current_price = ?, last_update = ? WHERE id = ?",
                    (new_price, current_time, product_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                cursor.execute(
                    "INSERT INTO price_history (product_id, price, change_date) VALUES (?, ?, ?)",
                    (product_id, new_price, current_time))
                
                conn.commit()
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        await asyncio.sleep(CHECK_INTERVAL)

async def on_startup(dp):
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS settings (
        user_id INTEGER PRIMARY KEY,
        check_interval INTEGER DEFAULT 1800
    )''')
    conn.commit()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
    asyncio.create_task(price_check_task())

if __name__ == '__main__':
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 –º–∏–Ω—É—Ç)
    CHECK_INTERVAL = 1800
    
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
